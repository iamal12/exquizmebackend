{
  "openapi": "3.0.0",
  "info": {
    "title": "exQuizMe API",
    "version": "1.0.0",
    "description": "API documentation for exQuizMe"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Check if the Tournament API is working.",
        "responses": {
          "200": {
            "description": "Tournament API is working!"
          }
        }
      }
    },
    "/customer": {
      "get": {
        "summary": "Get all customer records.",
        "responses": {
          "200": {
            "description": "Successfully retrieved customer records."
          }
        }
      },
      "post": {
        "summary": "Register a new customer record.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "custid": {
                    "type": "integer"
                  },
                  "custname": {
                    "type": "string"
                  },
                  "custemail": {
                    "type": "string"
                  },
                  "custphoneno": {
                    "type": "string"
                  },
                  "custpassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "custid",
                  "custname",
                  "custemail",
                  "custphoneno",
                  "custpassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer record registered successfully."
          },
          "409": {
            "description": "Duplicate entries."
          }
        }
      },
      "put": {
        "summary": "Update a customer record by name.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "custname": {
                    "type": "string"
                  },
                  "custemail": {
                    "type": "string"
                  },
                  "custphoneno": {
                    "type": "string"
                  },
                  "custpassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "custname"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer data updated successfully."
          }
        }
      },
      "delete": {
        "summary": "Delete a customer record by ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "custid": {
                    "type": "integer"
                  }
                },
                "required": [
                  "custid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer record deleted successfully."
          }
        }
      }
    },
    "/customer/{custname}": {
      "get": {
        "summary": "Get customer record by name.",
        "parameters": [
          {
            "in": "path",
            "name": "custname",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved customer record."
          }
        }
      }
    },
    "/customer/{custemail}/{custpassword}": {
      "get": {
        "summary": "Get customer record by email and password.",
        "parameters": [
          {
            "in": "path",
            "name": "custemail",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer email"
          },
          {
            "in": "path",
            "name": "custpassword",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Customer password"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved customer record."
          },
          "404": {
            "description": "No entries found."
          }
        }
      }
    },
    "/api/fixtures": {
      "post": {
        "summary": "Create a new fixture",
        "tags": [
          "Fixtures"
        ],
        "requestBody": {
          "description": "Fixture data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "round_id": {
                    "type": "integer"
                  },
                  "player1_id": {
                    "type": "integer"
                  },
                  "player2_id": {
                    "type": "integer"
                  },
                  "player1_score": {
                    "type": "integer"
                  },
                  "player2_score": {
                    "type": "integer"
                  }
                },
                "example": {
                  "round_id": 1,
                  "player1_id": 123,
                  "player2_id": 456,
                  "player1_score": 3,
                  "player2_score": 2
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Fixture created successfully",
            "content": {
              "application/json": {
                "example": {
                  "message": "Fixture created successfully",
                  "fixture_id": 789
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "summary": "Get all fixtures",
        "tags": [
          "Fixtures"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fixture"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/fixtures/{id}": {
      "get": {
        "summary": "Get fixture by ID",
        "tags": [
          "Fixtures"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Fixture ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fixture"
                }
              }
            }
          },
          "404": {
            "description": "Fixture not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "Update fixture by ID",
        "tags": [
          "Fixtures"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Fixture ID"
          }
        ],
        "requestBody": {
          "description": "Updated fixture data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Fixture"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fixture updated successfully",
            "content": {
              "application/json": {
                "example": {
                  "message": "Fixture updated successfully"
                }
              }
            }
          },
          "404": {
            "description": "Fixture not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "Delete fixture by ID",
        "tags": [
          "Fixtures"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Fixture ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Fixture deleted successfully",
            "content": {
              "application/json": {
                "example": {
                  "message": "Fixture deleted successfully"
                }
              }
            }
          },
          "404": {
            "description": "Fixture not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/onetoquizchallenges": {
      "post": {
        "summary": "Create a new one-to-one quiz challenge.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "challenger_id": {
                    "type": "integer"
                  },
                  "opponent_id": {
                    "type": "integer"
                  },
                  "category_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "challenger_id",
                  "opponent_id",
                  "category_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "One-to-one quiz challenge created successfully."
          }
        }
      },
      "get": {
        "summary": "Get all one-to-one quiz challenges.",
        "responses": {
          "200": {
            "description": "Successfully retrieved one-to-one quiz challenges."
          }
        }
      }
    },
    "/onetoquizchallenges/{id}": {
      "get": {
        "summary": "Get a one-to-one quiz challenge by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "One-to-one quiz challenge ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved one-to-one quiz challenge."
          },
          "404": {
            "description": "One-to-one quiz challenge not found."
          }
        }
      },
      "put": {
        "summary": "Update the status and winner of a one-to-one quiz challenge.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "One-to-one quiz challenge ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "winner_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "One-to-one quiz challenge updated successfully."
          }
        }
      },
      "delete": {
        "summary": "Delete a one-to-one quiz challenge by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "One-to-one quiz challenge ID"
          }
        ],
        "responses": {
          "200": {
            "description": "One-to-one quiz challenge deleted successfully."
          },
          "404": {
            "description": "One-to-one quiz challenge not found."
          }
        }
      }
    },
    "/onetoquizresponses": {
      "post": {
        "summary": "Create a new one-to-one quiz response.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "battle_id": {
                    "type": "integer"
                  },
                  "user_id": {
                    "type": "integer"
                  },
                  "question_id": {
                    "type": "integer"
                  },
                  "selected_option": {
                    "type": "string"
                  }
                },
                "required": [
                  "battle_id",
                  "user_id",
                  "question_id",
                  "selected_option"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "One-to-one quiz response created successfully."
          }
        }
      },
      "get": {
        "summary": "Get all one-to-one quiz responses.",
        "responses": {
          "200": {
            "description": "Successfully retrieved one-to-one quiz responses."
          }
        }
      }
    },
    "/onetoquizresponses/{id}": {
      "get": {
        "summary": "Get a one-to-one quiz response by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "One-to-one quiz response ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved one-to-one quiz response."
          },
          "404": {
            "description": "One-to-one quiz response not found."
          }
        }
      },
      "put": {
        "summary": "Update a one-to-one quiz response.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "One-to-one quiz response ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "battle_id": {
                    "type": "integer"
                  },
                  "user_id": {
                    "type": "integer"
                  },
                  "question_id": {
                    "type": "integer"
                  },
                  "selected_option": {
                    "type": "string"
                  }
                },
                "required": [
                  "battle_id",
                  "user_id",
                  "question_id",
                  "selected_option"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "One-to-one quiz response updated successfully."
          }
        }
      },
      "delete": {
        "summary": "Delete a one-to-one quiz response by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "One-to-one quiz response ID"
          }
        ],
        "responses": {
          "200": {
            "description": "One-to-one quiz response deleted successfully."
          },
          "404": {
            "description": "One-to-one quiz response not found."
          }
        }
      }
    },
    "/players": {
      "get": {
        "summary": "Get all players.",
        "responses": {
          "200": {
            "description": "Successfully retrieved players."
          }
        }
      },
      "post": {
        "summary": "Create a new player.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "user_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Player created successfully."
          }
        }
      }
    },
    "/players/{id}": {
      "get": {
        "summary": "Get a player by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Player ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved player."
          },
          "404": {
            "description": "Player not found."
          }
        }
      },
      "put": {
        "summary": "Update a player by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Player ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "user_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Player updated successfully."
          }
        }
      },
      "delete": {
        "summary": "Delete a player by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Player ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Player deleted successfully."
          },
          "404": {
            "description": "Player not found."
          }
        }
      }
    },
    "/quizrooms": {
      "post": {
        "summary": "Create a new quiz room.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "room_name": {
                    "type": "string"
                  },
                  "creator_id": {
                    "type": "integer"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string"
                  },
                  "max_participants": {
                    "type": "integer"
                  }
                },
                "required": [
                  "room_name",
                  "creator_id",
                  "start_time",
                  "end_time",
                  "status",
                  "max_participants"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quiz room created successfully."
          }
        }
      },
      "get": {
        "summary": "Get all quiz rooms.",
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz rooms."
          }
        }
      }
    },
    "/quizrooms/{id}": {
      "get": {
        "summary": "Get a quiz room by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz room ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz room."
          },
          "404": {
            "description": "Quiz room not found."
          }
        }
      },
      "delete": {
        "summary": "Delete a quiz room by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz room ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Quiz room deleted successfully."
          },
          "404": {
            "description": "Quiz room not found."
          }
        }
      }
    },
    "/quizrooms/{room_id}/close": {
      "put": {
        "summary": "Close a quiz room.",
        "parameters": [
          {
            "in": "path",
            "name": "room_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz room ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Quiz room closed successfully."
          }
        }
      }
    },
    "/quizroomparticipants": {
      "get": {
        "summary": "Get all quiz room participants.",
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz room participants."
          }
        }
      },
      "post": {
        "summary": "Create a new quiz room participant.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "room_id": {
                    "type": "integer"
                  },
                  "user_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "room_id",
                  "user_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quiz room participant created successfully."
          }
        }
      }
    },
    "/quizroomparticipants/{id}": {
      "get": {
        "summary": "Get a quiz room participant by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz room participant ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz room participant."
          },
          "404": {
            "description": "Quiz room participant not found."
          }
        }
      },
      "put": {
        "summary": "Edit a quiz room participant.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz room participant ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "room_id": {
                    "type": "integer"
                  },
                  "user_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "room_id",
                  "user_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quiz room participant updated successfully."
          },
          "404": {
            "description": "Quiz room participant not found."
          }
        }
      },
      "delete": {
        "summary": "Delete a quiz room participant by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz room participant ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Quiz room participant deleted successfully."
          },
          "404": {
            "description": "Quiz room participant not found."
          }
        }
      }
    },
    "/quiz_battles": {
      "post": {
        "summary": "Create a new random quiz battle.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "category_id": {
                    "type": "integer"
                  },
                  "user1_id": {
                    "type": "integer"
                  },
                  "user2_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "category_id",
                  "user1_id",
                  "user2_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quiz battle created successfully."
          }
        }
      },
      "get": {
        "summary": "Get all quiz battles.",
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz battles."
          }
        }
      }
    },
    "/quiz_battles/{id}": {
      "get": {
        "summary": "Get a quiz battle by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz battle ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quiz battle."
          },
          "404": {
            "description": "Quiz battle not found."
          }
        }
      },
      "put": {
        "summary": "Update the status and winner of a quiz battle.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz battle ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "winner_id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quiz battle updated successfully."
          },
          "404": {
            "description": "Quiz battle not found."
          }
        }
      },
      "delete": {
        "summary": "Delete a quiz battle by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Quiz battle ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Quiz battle deleted successfully."
          },
          "404": {
            "description": "Quiz battle not found."
          }
        }
      }
    },
    "/rounds": {
      "post": {
        "summary": "Create a new round.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tournament_id": {
                    "type": "integer"
                  },
                  "round_number": {
                    "type": "integer"
                  }
                },
                "required": [
                  "tournament_id",
                  "round_number"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Round created successfully."
          }
        }
      }
    },
    "/rounds/{tournament_id}": {
      "get": {
        "summary": "Get all rounds of a tournament.",
        "parameters": [
          {
            "in": "path",
            "name": "tournament_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Tournament ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved rounds."
          }
        }
      }
    },
    "/rounds/{round_id}": {
      "put": {
        "summary": "Update the status of a round.",
        "parameters": [
          {
            "in": "path",
            "name": "round_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Round ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Round status updated successfully."
          },
          "404": {
            "description": "Round not found."
          }
        }
      },
      "delete": {
        "summary": "Delete a round.",
        "parameters": [
          {
            "in": "path",
            "name": "round_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Round ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Round deleted successfully."
          },
          "404": {
            "description": "Round not found."
          }
        }
      }
    },
    "/tournaments": {
      "get": {
        "summary": "Get all tournaments.",
        "responses": {
          "200": {
            "description": "Successfully retrieved tournaments."
          }
        }
      },
      "post": {
        "summary": "Create a new tournament.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string"
                  },
                  "rounds": {
                    "type": "integer"
                  },
                  "max_slots": {
                    "type": "integer"
                  }
                },
                "required": [
                  "title",
                  "description",
                  "start_time",
                  "end_time",
                  "status",
                  "rounds",
                  "max_slots"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tournament created successfully."
          }
        }
      }
    },
    "/tournaments/{id}": {
      "get": {
        "summary": "Get tournament by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Tournament ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the tournament."
          },
          "404": {
            "description": "Tournament not found."
          }
        }
      },
      "delete": {
        "summary": "Delete a tournament by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Tournament ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Tournament deleted successfully."
          },
          "404": {
            "description": "Tournament not found."
          }
        }
      }
    }
  },
  "components": {},
  "tags": [
    {
      "name": "Fixtures",
      "description": "Fixture management endpoints"
    }
  ]
}